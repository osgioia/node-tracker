generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

/// Modelo para representar un torrent.
model Torrent {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?   @db.VarChar(255)
  infoHash     String    @unique
  completed    Int       @default(0)
  category     Category? @relation(fields: [categoryId], references: [id])
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  uploadedById Int
  downloads    Int       @default(0)
  anonymous    Boolean   @default(false)
  freeleech    Boolean   @default(false)
  size         Int       @default(0)
  tags         Tag[]
  categoryId   Int?
}

/// Modelo para representar una categoría de torrents.
model Category {
  id       Int       @id @default(autoincrement())
  name     String
  torrents Torrent[]
}

/// Modelo para representar una etiqueta de torrents.
model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  torrents Torrent[]
}

/// Modelo para representar un marcador de usuario.
model Bookmark {
  id     Int      @id @default(autoincrement())
  user   User     @relation(fields: [userId], references: [id])
  userId Int
  time   DateTime
  sort   Int      @default(0)

  @@unique([userId, id], name: "unique_user_bookmark")
}

/// Modelo para representar un usuario.
model User {
  id               Int              @id @default(autoincrement())
  username         String
  email            String
  password         String
  uid              String           @unique @default(uuid())
  torrents         Torrent[]
  bookmarks        Bookmark[]
  created          DateTime
  banned           Boolean
  role             Role             @default(USER)
  invitesCreated   Invite[]         @relation("InviteCreator")
  invitedById      Int?
  remainingInvites Int
  emailVerified    Boolean
  Progress         Progress[]
  InviteTreeNode   InviteTreeNode[]
  userBans         UserBan[]
  // Campos para funcionalidad de ratio
  uploaded         BigInt           @default(0)
  downloaded       BigInt           @default(0)
  seedtime         BigInt           @default(0) // tiempo total de seed en segundos
}

/// Modelo para representar el progreso de descarga de un usuario.
model Progress {
  infoHash String
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  uploaded BigInt
  download BigInt
  left     BigInt

  @@id([infoHash, userId])
}

/// Modelo para representar un rango de IPs geolocalizadas.
model GeoIP {
  startIP BigInt
  endIP   BigInt
  code    String @db.VarChar(2)

  @@id([startIP, endIP])
}

/// Modelo para representar un nodo en el árbol de invitaciones.
model InviteTreeNode {
  userId    Int  @unique @map("userID")
  inviter   User @relation(fields: [inviterId], references: [id])
  inviterId Int

  @@index([inviterId], name: "InviterIdIndex")
  @@index([userId], name: "UserIDIndex")
}

/// Modelo para representar una invitación.
model Invite {
  id        Int      @id @default(autoincrement())
  inviter   User     @relation("InviteCreator", fields: [inviterId], references: [id])
  inviterId Int
  inviteKey String   @unique
  email     String
  expires   DateTime
  reason    String
  used      Boolean  @default(false)

  @@index([expires], name: "ExpiresIndex")
  @@index([inviterId], name: "InviterIdInviteIndex")
}

/// Modelo para representar un rango de IPs baneadas.
model IPBan {
  id     Int     @id @default(autoincrement())
  fromIP BigInt
  toIP   BigInt
  reason String? @db.VarChar(255)

  @@unique([fromIP, toIP], name: "FromIP_ToIP")
  @@index([toIP], name: "ToIPIndex")
}

/// Modelo para representar un baneo específico de usuario.
model UserBan {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  reason    String    @db.VarChar(500)
  bannedBy  String // username del admin/moderador que aplicó el ban
  bannedAt  DateTime  @default(now())
  expiresAt DateTime? // null para ban permanente
  active    Boolean   @default(true)

  @@index([userId], name: "UserBanUserIdIndex")
  @@index([expiresAt], name: "UserBanExpiresIndex")
  @@index([active], name: "UserBanActiveIndex")
}

/// Roles de usuario.
enum Role {
  USER
  ADMIN
  MODERATOR
}
